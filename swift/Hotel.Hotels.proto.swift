// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file hotels.proto

import Foundation
import ProtocolBuffers


public struct Hotel { }

public func == (lhs: Hotel.Hotels, rhs: Hotel.Hotels) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hotel == rhs.hotel)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Hotel.Hotel, rhs: Hotel.Hotel) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasHotelId == rhs.hasHotelId) && (!lhs.hasHotelId || lhs.hotelId == rhs.hotelId)
  fieldCheck = fieldCheck && (lhs.hasHotelScore == rhs.hasHotelScore) && (!lhs.hasHotelScore || lhs.hotelScore == rhs.hotelScore)
  fieldCheck = fieldCheck && (lhs.hasHotelRank == rhs.hasHotelRank) && (!lhs.hasHotelRank || lhs.hotelRank == rhs.hotelRank)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Hotel {
  public struct HotelsRoot {
    public static var sharedInstance : HotelsRoot {
     struct Static {
         static let instance : HotelsRoot = HotelsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class Hotels : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hotel:Array<Hotel.Hotel>  = Array<Hotel.Hotel>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      for oneElementhotel in hotel {
          try output.writeMessage(1, value:oneElementhotel)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      for oneElementhotel in hotel {
          serialize_size += oneElementhotel.computeMessageSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Hotel.Hotels> {
      var mergedArray = Array<Hotel.Hotels>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Hotel.Hotels? {
      return try Hotel.Hotels.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Hotel.Hotels {
      return try Hotel.Hotels.Builder().mergeFromData(data, extensionRegistry:Hotel.HotelsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Hotel.Hotels {
      return try Hotel.Hotels.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Hotel.Hotels {
      return try Hotel.Hotels.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Hotel.Hotels {
      return try Hotel.Hotels.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Hotel.Hotels {
      return try Hotel.Hotels.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Hotel.Hotels {
      return try Hotel.Hotels.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Hotel.Hotels.Builder {
      return Hotel.Hotels.classBuilder() as! Hotel.Hotels.Builder
    }
    public func getBuilder() -> Hotel.Hotels.Builder {
      return classBuilder() as! Hotel.Hotels.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Hotel.Hotels.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Hotel.Hotels.Builder()
    }
    public func toBuilder() throws -> Hotel.Hotels.Builder {
      return try Hotel.Hotels.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Hotel.Hotels) throws -> Hotel.Hotels.Builder {
      return try Hotel.Hotels.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      var hotelElementIndex:Int = 0
      for oneElementhotel in hotel {
          output += "\(indent) hotel[\(hotelElementIndex)] {\n"
          output += try oneElementhotel.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          hotelElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementhotel in hotel {
                hashCode = (hashCode &* 31) &+ oneElementhotel.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Hotel.Hotels"
    }
    override public func className() -> String {
        return "Hotel.Hotels"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Hotel.Hotels.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Hotel.Hotels = Hotel.Hotels()
      public func getMessage() -> Hotel.Hotels {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hotel:Array<Hotel.Hotel> {
           get {
               return builderResult.hotel
           }
           set (value) {
               builderResult.hotel = value
           }
      }
      public func setHotel(value:Array<Hotel.Hotel>) -> Hotel.Hotels.Builder {
        self.hotel = value
        return self
      }
      public func clearHotel() -> Hotel.Hotels.Builder {
        builderResult.hotel.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Hotel.Hotels.Builder {
        builderResult = Hotel.Hotels()
        return self
      }
      public override func clone() throws -> Hotel.Hotels.Builder {
        return try Hotel.Hotels.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Hotel.Hotels {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Hotel.Hotels {
        let returnMe:Hotel.Hotels = builderResult
        return returnMe
      }
      public func mergeFrom(other:Hotel.Hotels) throws -> Hotel.Hotels.Builder {
        if other == Hotel.Hotels() {
         return self
        }
        if !other.hotel.isEmpty  {
           builderResult.hotel += other.hotel
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Hotel.Hotels.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Hotel.Hotels.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder = Hotel.Hotel.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            hotel += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class Hotel : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hotelId:String = ""

    public private(set) var hasHotelId:Bool = false
    public private(set) var hotelScore:Float = Float(0)

    public private(set) var hasHotelScore:Bool = false
    public private(set) var hotelRank:Int32 = Int32(0)

    public private(set) var hasHotelRank:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasHotelId {
        try output.writeString(1, value:hotelId)
      }
      if hasHotelScore {
        try output.writeFloat(2, value:hotelScore)
      }
      if hasHotelRank {
        try output.writeInt32(3, value:hotelRank)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasHotelId {
        serialize_size += hotelId.computeStringSize(1)
      }
      if hasHotelScore {
        serialize_size += hotelScore.computeFloatSize(2)
      }
      if hasHotelRank {
        serialize_size += hotelRank.computeInt32Size(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Hotel.Hotel> {
      var mergedArray = Array<Hotel.Hotel>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Hotel.Hotel? {
      return try Hotel.Hotel.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Hotel.Hotel {
      return try Hotel.Hotel.Builder().mergeFromData(data, extensionRegistry:Hotel.HotelsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Hotel.Hotel {
      return try Hotel.Hotel.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Hotel.Hotel {
      return try Hotel.Hotel.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Hotel.Hotel {
      return try Hotel.Hotel.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Hotel.Hotel {
      return try Hotel.Hotel.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Hotel.Hotel {
      return try Hotel.Hotel.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Hotel.Hotel.Builder {
      return Hotel.Hotel.classBuilder() as! Hotel.Hotel.Builder
    }
    public func getBuilder() -> Hotel.Hotel.Builder {
      return classBuilder() as! Hotel.Hotel.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Hotel.Hotel.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Hotel.Hotel.Builder()
    }
    public func toBuilder() throws -> Hotel.Hotel.Builder {
      return try Hotel.Hotel.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Hotel.Hotel) throws -> Hotel.Hotel.Builder {
      return try Hotel.Hotel.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasHotelId {
        output += "\(indent) hotelId: \(hotelId) \n"
      }
      if hasHotelScore {
        output += "\(indent) hotelScore: \(hotelScore) \n"
      }
      if hasHotelRank {
        output += "\(indent) hotelRank: \(hotelRank) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasHotelId {
               hashCode = (hashCode &* 31) &+ hotelId.hashValue
            }
            if hasHotelScore {
               hashCode = (hashCode &* 31) &+ hotelScore.hashValue
            }
            if hasHotelRank {
               hashCode = (hashCode &* 31) &+ hotelRank.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Hotel.Hotel"
    }
    override public func className() -> String {
        return "Hotel.Hotel"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Hotel.Hotel.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Hotel.Hotel = Hotel.Hotel()
      public func getMessage() -> Hotel.Hotel {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasHotelId:Bool {
           get {
                return builderResult.hasHotelId
           }
      }
      public var hotelId:String {
           get {
                return builderResult.hotelId
           }
           set (value) {
               builderResult.hasHotelId = true
               builderResult.hotelId = value
           }
      }
      public func setHotelId(value:String) -> Hotel.Hotel.Builder {
        self.hotelId = value
        return self
      }
      public func clearHotelId() -> Hotel.Hotel.Builder{
           builderResult.hasHotelId = false
           builderResult.hotelId = ""
           return self
      }
      public var hasHotelScore:Bool {
           get {
                return builderResult.hasHotelScore
           }
      }
      public var hotelScore:Float {
           get {
                return builderResult.hotelScore
           }
           set (value) {
               builderResult.hasHotelScore = true
               builderResult.hotelScore = value
           }
      }
      public func setHotelScore(value:Float) -> Hotel.Hotel.Builder {
        self.hotelScore = value
        return self
      }
      public func clearHotelScore() -> Hotel.Hotel.Builder{
           builderResult.hasHotelScore = false
           builderResult.hotelScore = Float(0)
           return self
      }
      public var hasHotelRank:Bool {
           get {
                return builderResult.hasHotelRank
           }
      }
      public var hotelRank:Int32 {
           get {
                return builderResult.hotelRank
           }
           set (value) {
               builderResult.hasHotelRank = true
               builderResult.hotelRank = value
           }
      }
      public func setHotelRank(value:Int32) -> Hotel.Hotel.Builder {
        self.hotelRank = value
        return self
      }
      public func clearHotelRank() -> Hotel.Hotel.Builder{
           builderResult.hasHotelRank = false
           builderResult.hotelRank = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Hotel.Hotel.Builder {
        builderResult = Hotel.Hotel()
        return self
      }
      public override func clone() throws -> Hotel.Hotel.Builder {
        return try Hotel.Hotel.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Hotel.Hotel {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Hotel.Hotel {
        let returnMe:Hotel.Hotel = builderResult
        return returnMe
      }
      public func mergeFrom(other:Hotel.Hotel) throws -> Hotel.Hotel.Builder {
        if other == Hotel.Hotel() {
         return self
        }
        if other.hasHotelId {
             hotelId = other.hotelId
        }
        if other.hasHotelScore {
             hotelScore = other.hotelScore
        }
        if other.hasHotelRank {
             hotelRank = other.hotelRank
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Hotel.Hotel.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Hotel.Hotel.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            hotelId = try input.readString()

          case 21 :
            hotelScore = try input.readFloat()

          case 24 :
            hotelRank = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
