// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file userinfo.proto

import Foundation
import ProtocolBuffers


public struct User { }

public func == (lhs: User.UserInfo, rhs: User.UserInfo) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUserId == rhs.hasUserId) && (!lhs.hasUserId || lhs.userId == rhs.userId)
  fieldCheck = fieldCheck && (lhs.hasOrigin == rhs.hasOrigin) && (!lhs.hasOrigin || lhs.origin == rhs.origin)
  fieldCheck = fieldCheck && (lhs.hasMinBudget == rhs.hasMinBudget) && (!lhs.hasMinBudget || lhs.minBudget == rhs.minBudget)
  fieldCheck = fieldCheck && (lhs.hasMaxBudget == rhs.hasMaxBudget) && (!lhs.hasMaxBudget || lhs.maxBudget == rhs.maxBudget)
  fieldCheck = fieldCheck && (lhs.hasPrefMatrix == rhs.hasPrefMatrix) && (!lhs.hasPrefMatrix || lhs.prefMatrix == rhs.prefMatrix)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: User.UserPref, rhs: User.UserPref) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasArtsy == rhs.hasArtsy) && (!lhs.hasArtsy || lhs.artsy == rhs.artsy)
  fieldCheck = fieldCheck && (lhs.hasAdrenaline == rhs.hasAdrenaline) && (!lhs.hasAdrenaline || lhs.adrenaline == rhs.adrenaline)
  fieldCheck = fieldCheck && (lhs.hasBackpacker == rhs.hasBackpacker) && (!lhs.hasBackpacker || lhs.backpacker == rhs.backpacker)
  fieldCheck = fieldCheck && (lhs.hasBeach == rhs.hasBeach) && (!lhs.hasBeach || lhs.beach == rhs.beach)
  fieldCheck = fieldCheck && (lhs.hasBudget == rhs.hasBudget) && (!lhs.hasBudget || lhs.budget == rhs.budget)
  fieldCheck = fieldCheck && (lhs.hasFamily == rhs.hasFamily) && (!lhs.hasFamily || lhs.family == rhs.family)
  fieldCheck = fieldCheck && (lhs.hasFoodie == rhs.hasFoodie) && (!lhs.hasFoodie || lhs.foodie == rhs.foodie)
  fieldCheck = fieldCheck && (lhs.hasGreen == rhs.hasGreen) && (!lhs.hasGreen || lhs.green == rhs.green)
  fieldCheck = fieldCheck && (lhs.hasHistory == rhs.hasHistory) && (!lhs.hasHistory || lhs.history == rhs.history)
  fieldCheck = fieldCheck && (lhs.hasLocal == rhs.hasLocal) && (!lhs.hasLocal || lhs.local == rhs.local)
  fieldCheck = fieldCheck && (lhs.hasLuxury == rhs.hasLuxury) && (!lhs.hasLuxury || lhs.luxury == rhs.luxury)
  fieldCheck = fieldCheck && (lhs.hasNature == rhs.hasNature) && (!lhs.hasNature || lhs.nature == rhs.nature)
  fieldCheck = fieldCheck && (lhs.hasNightlife == rhs.hasNightlife) && (!lhs.hasNightlife || lhs.nightlife == rhs.nightlife)
  fieldCheck = fieldCheck && (lhs.hasSerene == rhs.hasSerene) && (!lhs.hasSerene || lhs.serene == rhs.serene)
  fieldCheck = fieldCheck && (lhs.hasShopping == rhs.hasShopping) && (!lhs.hasShopping || lhs.shopping == rhs.shopping)
  fieldCheck = fieldCheck && (lhs.hasStudent == rhs.hasStudent) && (!lhs.hasStudent || lhs.student == rhs.student)
  fieldCheck = fieldCheck && (lhs.hasTrendsetter == rhs.hasTrendsetter) && (!lhs.hasTrendsetter || lhs.trendsetter == rhs.trendsetter)
  fieldCheck = fieldCheck && (lhs.hasUrban == rhs.hasUrban) && (!lhs.hasUrban || lhs.urban == rhs.urban)
  fieldCheck = fieldCheck && (lhs.hasVegetarian == rhs.hasVegetarian) && (!lhs.hasVegetarian || lhs.vegetarian == rhs.vegetarian)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension User {
  public struct UserinfoRoot {
    public static var sharedInstance : UserinfoRoot {
     struct Static {
         static let instance : UserinfoRoot = UserinfoRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class UserInfo : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var userId:String = ""

    public private(set) var hasUserId:Bool = false
    public private(set) var origin:String = ""

    public private(set) var hasOrigin:Bool = false
    public private(set) var minBudget:Float = Float(0)

    public private(set) var hasMinBudget:Bool = false
    public private(set) var maxBudget:Float = Float(0)

    public private(set) var hasMaxBudget:Bool = false
    public private(set) var prefMatrix:User.UserPref!
    public private(set) var hasPrefMatrix:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasUserId {
        try output.writeString(1, value:userId)
      }
      if hasOrigin {
        try output.writeString(2, value:origin)
      }
      if hasMinBudget {
        try output.writeFloat(3, value:minBudget)
      }
      if hasMaxBudget {
        try output.writeFloat(4, value:maxBudget)
      }
      if hasPrefMatrix {
        try output.writeMessage(5, value:prefMatrix)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasUserId {
        serialize_size += userId.computeStringSize(1)
      }
      if hasOrigin {
        serialize_size += origin.computeStringSize(2)
      }
      if hasMinBudget {
        serialize_size += minBudget.computeFloatSize(3)
      }
      if hasMaxBudget {
        serialize_size += maxBudget.computeFloatSize(4)
      }
      if hasPrefMatrix {
          if let varSizeprefMatrix = prefMatrix?.computeMessageSize(5) {
              serialize_size += varSizeprefMatrix
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<User.UserInfo> {
      var mergedArray = Array<User.UserInfo>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> User.UserInfo? {
      return try User.UserInfo.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> User.UserInfo {
      return try User.UserInfo.Builder().mergeFromData(data, extensionRegistry:User.UserinfoRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> User.UserInfo {
      return try User.UserInfo.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> User.UserInfo {
      return try User.UserInfo.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> User.UserInfo {
      return try User.UserInfo.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> User.UserInfo {
      return try User.UserInfo.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> User.UserInfo {
      return try User.UserInfo.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> User.UserInfo.Builder {
      return User.UserInfo.classBuilder() as! User.UserInfo.Builder
    }
    public func getBuilder() -> User.UserInfo.Builder {
      return classBuilder() as! User.UserInfo.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return User.UserInfo.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return User.UserInfo.Builder()
    }
    public func toBuilder() throws -> User.UserInfo.Builder {
      return try User.UserInfo.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:User.UserInfo) throws -> User.UserInfo.Builder {
      return try User.UserInfo.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasUserId {
        output += "\(indent) userId: \(userId) \n"
      }
      if hasOrigin {
        output += "\(indent) origin: \(origin) \n"
      }
      if hasMinBudget {
        output += "\(indent) minBudget: \(minBudget) \n"
      }
      if hasMaxBudget {
        output += "\(indent) maxBudget: \(maxBudget) \n"
      }
      if hasPrefMatrix {
        output += "\(indent) prefMatrix {\n"
        if let outDescPrefMatrix = prefMatrix {
          output += try outDescPrefMatrix.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUserId {
               hashCode = (hashCode &* 31) &+ userId.hashValue
            }
            if hasOrigin {
               hashCode = (hashCode &* 31) &+ origin.hashValue
            }
            if hasMinBudget {
               hashCode = (hashCode &* 31) &+ minBudget.hashValue
            }
            if hasMaxBudget {
               hashCode = (hashCode &* 31) &+ maxBudget.hashValue
            }
            if hasPrefMatrix {
                if let hashValueprefMatrix = prefMatrix?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueprefMatrix
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "User.UserInfo"
    }
    override public func className() -> String {
        return "User.UserInfo"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return User.UserInfo.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:User.UserInfo = User.UserInfo()
      public func getMessage() -> User.UserInfo {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasUserId:Bool {
           get {
                return builderResult.hasUserId
           }
      }
      public var userId:String {
           get {
                return builderResult.userId
           }
           set (value) {
               builderResult.hasUserId = true
               builderResult.userId = value
           }
      }
      public func setUserId(value:String) -> User.UserInfo.Builder {
        self.userId = value
        return self
      }
      public func clearUserId() -> User.UserInfo.Builder{
           builderResult.hasUserId = false
           builderResult.userId = ""
           return self
      }
      public var hasOrigin:Bool {
           get {
                return builderResult.hasOrigin
           }
      }
      public var origin:String {
           get {
                return builderResult.origin
           }
           set (value) {
               builderResult.hasOrigin = true
               builderResult.origin = value
           }
      }
      public func setOrigin(value:String) -> User.UserInfo.Builder {
        self.origin = value
        return self
      }
      public func clearOrigin() -> User.UserInfo.Builder{
           builderResult.hasOrigin = false
           builderResult.origin = ""
           return self
      }
      public var hasMinBudget:Bool {
           get {
                return builderResult.hasMinBudget
           }
      }
      public var minBudget:Float {
           get {
                return builderResult.minBudget
           }
           set (value) {
               builderResult.hasMinBudget = true
               builderResult.minBudget = value
           }
      }
      public func setMinBudget(value:Float) -> User.UserInfo.Builder {
        self.minBudget = value
        return self
      }
      public func clearMinBudget() -> User.UserInfo.Builder{
           builderResult.hasMinBudget = false
           builderResult.minBudget = Float(0)
           return self
      }
      public var hasMaxBudget:Bool {
           get {
                return builderResult.hasMaxBudget
           }
      }
      public var maxBudget:Float {
           get {
                return builderResult.maxBudget
           }
           set (value) {
               builderResult.hasMaxBudget = true
               builderResult.maxBudget = value
           }
      }
      public func setMaxBudget(value:Float) -> User.UserInfo.Builder {
        self.maxBudget = value
        return self
      }
      public func clearMaxBudget() -> User.UserInfo.Builder{
           builderResult.hasMaxBudget = false
           builderResult.maxBudget = Float(0)
           return self
      }
      public var hasPrefMatrix:Bool {
           get {
               return builderResult.hasPrefMatrix
           }
      }
      public var prefMatrix:User.UserPref! {
           get {
               if prefMatrixBuilder_ != nil {
                  builderResult.prefMatrix = prefMatrixBuilder_.getMessage()
               }
               return builderResult.prefMatrix
           }
           set (value) {
               builderResult.hasPrefMatrix = true
               builderResult.prefMatrix = value
           }
      }
      private var prefMatrixBuilder_:User.UserPref.Builder! {
           didSet {
              builderResult.hasPrefMatrix = true
           }
      }
      public func getPrefMatrixBuilder() -> User.UserPref.Builder {
        if prefMatrixBuilder_ == nil {
           prefMatrixBuilder_ = User.UserPref.Builder()
           builderResult.prefMatrix = prefMatrixBuilder_.getMessage()
           if prefMatrix != nil {
              try! prefMatrixBuilder_.mergeFrom(prefMatrix)
           }
        }
        return prefMatrixBuilder_
      }
      public func setPrefMatrix(value:User.UserPref!) -> User.UserInfo.Builder {
        self.prefMatrix = value
        return self
      }
      public func mergePrefMatrix(value:User.UserPref) throws -> User.UserInfo.Builder {
        if builderResult.hasPrefMatrix {
          builderResult.prefMatrix = try User.UserPref.builderWithPrototype(builderResult.prefMatrix).mergeFrom(value).buildPartial()
        } else {
          builderResult.prefMatrix = value
        }
        builderResult.hasPrefMatrix = true
        return self
      }
      public func clearPrefMatrix() -> User.UserInfo.Builder {
        prefMatrixBuilder_ = nil
        builderResult.hasPrefMatrix = false
        builderResult.prefMatrix = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> User.UserInfo.Builder {
        builderResult = User.UserInfo()
        return self
      }
      public override func clone() throws -> User.UserInfo.Builder {
        return try User.UserInfo.builderWithPrototype(builderResult)
      }
      public override func build() throws -> User.UserInfo {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> User.UserInfo {
        let returnMe:User.UserInfo = builderResult
        return returnMe
      }
      public func mergeFrom(other:User.UserInfo) throws -> User.UserInfo.Builder {
        if other == User.UserInfo() {
         return self
        }
        if other.hasUserId {
             userId = other.userId
        }
        if other.hasOrigin {
             origin = other.origin
        }
        if other.hasMinBudget {
             minBudget = other.minBudget
        }
        if other.hasMaxBudget {
             maxBudget = other.maxBudget
        }
        if (other.hasPrefMatrix) {
            try mergePrefMatrix(other.prefMatrix)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> User.UserInfo.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> User.UserInfo.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            userId = try input.readString()

          case 18 :
            origin = try input.readString()

          case 29 :
            minBudget = try input.readFloat()

          case 37 :
            maxBudget = try input.readFloat()

          case 42 :
            let subBuilder:User.UserPref.Builder = User.UserPref.Builder()
            if hasPrefMatrix {
              try subBuilder.mergeFrom(prefMatrix)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            prefMatrix = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class UserPref : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var artsy:Bool = false

    public private(set) var hasArtsy:Bool = false
    public private(set) var adrenaline:Bool = false

    public private(set) var hasAdrenaline:Bool = false
    public private(set) var backpacker:Bool = false

    public private(set) var hasBackpacker:Bool = false
    public private(set) var beach:Bool = false

    public private(set) var hasBeach:Bool = false
    public private(set) var budget:Bool = false

    public private(set) var hasBudget:Bool = false
    public private(set) var family:Bool = false

    public private(set) var hasFamily:Bool = false
    public private(set) var foodie:Bool = false

    public private(set) var hasFoodie:Bool = false
    public private(set) var green:Bool = false

    public private(set) var hasGreen:Bool = false
    public private(set) var history:Bool = false

    public private(set) var hasHistory:Bool = false
    public private(set) var local:Bool = false

    public private(set) var hasLocal:Bool = false
    public private(set) var luxury:Bool = false

    public private(set) var hasLuxury:Bool = false
    public private(set) var nature:Bool = false

    public private(set) var hasNature:Bool = false
    public private(set) var nightlife:Bool = false

    public private(set) var hasNightlife:Bool = false
    public private(set) var serene:Bool = false

    public private(set) var hasSerene:Bool = false
    public private(set) var shopping:Bool = false

    public private(set) var hasShopping:Bool = false
    public private(set) var student:Bool = false

    public private(set) var hasStudent:Bool = false
    public private(set) var trendsetter:Bool = false

    public private(set) var hasTrendsetter:Bool = false
    public private(set) var urban:Bool = false

    public private(set) var hasUrban:Bool = false
    public private(set) var vegetarian:Bool = false

    public private(set) var hasVegetarian:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasArtsy {
        try output.writeBool(1, value:artsy)
      }
      if hasAdrenaline {
        try output.writeBool(2, value:adrenaline)
      }
      if hasBackpacker {
        try output.writeBool(3, value:backpacker)
      }
      if hasBeach {
        try output.writeBool(4, value:beach)
      }
      if hasBudget {
        try output.writeBool(5, value:budget)
      }
      if hasFamily {
        try output.writeBool(6, value:family)
      }
      if hasFoodie {
        try output.writeBool(7, value:foodie)
      }
      if hasGreen {
        try output.writeBool(8, value:green)
      }
      if hasHistory {
        try output.writeBool(9, value:history)
      }
      if hasLocal {
        try output.writeBool(10, value:local)
      }
      if hasLuxury {
        try output.writeBool(11, value:luxury)
      }
      if hasNature {
        try output.writeBool(12, value:nature)
      }
      if hasNightlife {
        try output.writeBool(13, value:nightlife)
      }
      if hasSerene {
        try output.writeBool(14, value:serene)
      }
      if hasShopping {
        try output.writeBool(15, value:shopping)
      }
      if hasStudent {
        try output.writeBool(16, value:student)
      }
      if hasTrendsetter {
        try output.writeBool(17, value:trendsetter)
      }
      if hasUrban {
        try output.writeBool(18, value:urban)
      }
      if hasVegetarian {
        try output.writeBool(19, value:vegetarian)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasArtsy {
        serialize_size += artsy.computeBoolSize(1)
      }
      if hasAdrenaline {
        serialize_size += adrenaline.computeBoolSize(2)
      }
      if hasBackpacker {
        serialize_size += backpacker.computeBoolSize(3)
      }
      if hasBeach {
        serialize_size += beach.computeBoolSize(4)
      }
      if hasBudget {
        serialize_size += budget.computeBoolSize(5)
      }
      if hasFamily {
        serialize_size += family.computeBoolSize(6)
      }
      if hasFoodie {
        serialize_size += foodie.computeBoolSize(7)
      }
      if hasGreen {
        serialize_size += green.computeBoolSize(8)
      }
      if hasHistory {
        serialize_size += history.computeBoolSize(9)
      }
      if hasLocal {
        serialize_size += local.computeBoolSize(10)
      }
      if hasLuxury {
        serialize_size += luxury.computeBoolSize(11)
      }
      if hasNature {
        serialize_size += nature.computeBoolSize(12)
      }
      if hasNightlife {
        serialize_size += nightlife.computeBoolSize(13)
      }
      if hasSerene {
        serialize_size += serene.computeBoolSize(14)
      }
      if hasShopping {
        serialize_size += shopping.computeBoolSize(15)
      }
      if hasStudent {
        serialize_size += student.computeBoolSize(16)
      }
      if hasTrendsetter {
        serialize_size += trendsetter.computeBoolSize(17)
      }
      if hasUrban {
        serialize_size += urban.computeBoolSize(18)
      }
      if hasVegetarian {
        serialize_size += vegetarian.computeBoolSize(19)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<User.UserPref> {
      var mergedArray = Array<User.UserPref>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> User.UserPref? {
      return try User.UserPref.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> User.UserPref {
      return try User.UserPref.Builder().mergeFromData(data, extensionRegistry:User.UserinfoRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> User.UserPref {
      return try User.UserPref.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> User.UserPref {
      return try User.UserPref.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> User.UserPref {
      return try User.UserPref.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> User.UserPref {
      return try User.UserPref.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> User.UserPref {
      return try User.UserPref.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> User.UserPref.Builder {
      return User.UserPref.classBuilder() as! User.UserPref.Builder
    }
    public func getBuilder() -> User.UserPref.Builder {
      return classBuilder() as! User.UserPref.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return User.UserPref.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return User.UserPref.Builder()
    }
    public func toBuilder() throws -> User.UserPref.Builder {
      return try User.UserPref.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:User.UserPref) throws -> User.UserPref.Builder {
      return try User.UserPref.Builder().mergeFrom(prototype)
    }
    override public func getDescription(indent:String) throws -> String {
      var output:String = ""
      if hasArtsy {
        output += "\(indent) artsy: \(artsy) \n"
      }
      if hasAdrenaline {
        output += "\(indent) adrenaline: \(adrenaline) \n"
      }
      if hasBackpacker {
        output += "\(indent) backpacker: \(backpacker) \n"
      }
      if hasBeach {
        output += "\(indent) beach: \(beach) \n"
      }
      if hasBudget {
        output += "\(indent) budget: \(budget) \n"
      }
      if hasFamily {
        output += "\(indent) family: \(family) \n"
      }
      if hasFoodie {
        output += "\(indent) foodie: \(foodie) \n"
      }
      if hasGreen {
        output += "\(indent) green: \(green) \n"
      }
      if hasHistory {
        output += "\(indent) history: \(history) \n"
      }
      if hasLocal {
        output += "\(indent) local: \(local) \n"
      }
      if hasLuxury {
        output += "\(indent) luxury: \(luxury) \n"
      }
      if hasNature {
        output += "\(indent) nature: \(nature) \n"
      }
      if hasNightlife {
        output += "\(indent) nightlife: \(nightlife) \n"
      }
      if hasSerene {
        output += "\(indent) serene: \(serene) \n"
      }
      if hasShopping {
        output += "\(indent) shopping: \(shopping) \n"
      }
      if hasStudent {
        output += "\(indent) student: \(student) \n"
      }
      if hasTrendsetter {
        output += "\(indent) trendsetter: \(trendsetter) \n"
      }
      if hasUrban {
        output += "\(indent) urban: \(urban) \n"
      }
      if hasVegetarian {
        output += "\(indent) vegetarian: \(vegetarian) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasArtsy {
               hashCode = (hashCode &* 31) &+ artsy.hashValue
            }
            if hasAdrenaline {
               hashCode = (hashCode &* 31) &+ adrenaline.hashValue
            }
            if hasBackpacker {
               hashCode = (hashCode &* 31) &+ backpacker.hashValue
            }
            if hasBeach {
               hashCode = (hashCode &* 31) &+ beach.hashValue
            }
            if hasBudget {
               hashCode = (hashCode &* 31) &+ budget.hashValue
            }
            if hasFamily {
               hashCode = (hashCode &* 31) &+ family.hashValue
            }
            if hasFoodie {
               hashCode = (hashCode &* 31) &+ foodie.hashValue
            }
            if hasGreen {
               hashCode = (hashCode &* 31) &+ green.hashValue
            }
            if hasHistory {
               hashCode = (hashCode &* 31) &+ history.hashValue
            }
            if hasLocal {
               hashCode = (hashCode &* 31) &+ local.hashValue
            }
            if hasLuxury {
               hashCode = (hashCode &* 31) &+ luxury.hashValue
            }
            if hasNature {
               hashCode = (hashCode &* 31) &+ nature.hashValue
            }
            if hasNightlife {
               hashCode = (hashCode &* 31) &+ nightlife.hashValue
            }
            if hasSerene {
               hashCode = (hashCode &* 31) &+ serene.hashValue
            }
            if hasShopping {
               hashCode = (hashCode &* 31) &+ shopping.hashValue
            }
            if hasStudent {
               hashCode = (hashCode &* 31) &+ student.hashValue
            }
            if hasTrendsetter {
               hashCode = (hashCode &* 31) &+ trendsetter.hashValue
            }
            if hasUrban {
               hashCode = (hashCode &* 31) &+ urban.hashValue
            }
            if hasVegetarian {
               hashCode = (hashCode &* 31) &+ vegetarian.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "User.UserPref"
    }
    override public func className() -> String {
        return "User.UserPref"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return User.UserPref.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:User.UserPref = User.UserPref()
      public func getMessage() -> User.UserPref {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasArtsy:Bool {
           get {
                return builderResult.hasArtsy
           }
      }
      public var artsy:Bool {
           get {
                return builderResult.artsy
           }
           set (value) {
               builderResult.hasArtsy = true
               builderResult.artsy = value
           }
      }
      public func setArtsy(value:Bool) -> User.UserPref.Builder {
        self.artsy = value
        return self
      }
      public func clearArtsy() -> User.UserPref.Builder{
           builderResult.hasArtsy = false
           builderResult.artsy = false
           return self
      }
      public var hasAdrenaline:Bool {
           get {
                return builderResult.hasAdrenaline
           }
      }
      public var adrenaline:Bool {
           get {
                return builderResult.adrenaline
           }
           set (value) {
               builderResult.hasAdrenaline = true
               builderResult.adrenaline = value
           }
      }
      public func setAdrenaline(value:Bool) -> User.UserPref.Builder {
        self.adrenaline = value
        return self
      }
      public func clearAdrenaline() -> User.UserPref.Builder{
           builderResult.hasAdrenaline = false
           builderResult.adrenaline = false
           return self
      }
      public var hasBackpacker:Bool {
           get {
                return builderResult.hasBackpacker
           }
      }
      public var backpacker:Bool {
           get {
                return builderResult.backpacker
           }
           set (value) {
               builderResult.hasBackpacker = true
               builderResult.backpacker = value
           }
      }
      public func setBackpacker(value:Bool) -> User.UserPref.Builder {
        self.backpacker = value
        return self
      }
      public func clearBackpacker() -> User.UserPref.Builder{
           builderResult.hasBackpacker = false
           builderResult.backpacker = false
           return self
      }
      public var hasBeach:Bool {
           get {
                return builderResult.hasBeach
           }
      }
      public var beach:Bool {
           get {
                return builderResult.beach
           }
           set (value) {
               builderResult.hasBeach = true
               builderResult.beach = value
           }
      }
      public func setBeach(value:Bool) -> User.UserPref.Builder {
        self.beach = value
        return self
      }
      public func clearBeach() -> User.UserPref.Builder{
           builderResult.hasBeach = false
           builderResult.beach = false
           return self
      }
      public var hasBudget:Bool {
           get {
                return builderResult.hasBudget
           }
      }
      public var budget:Bool {
           get {
                return builderResult.budget
           }
           set (value) {
               builderResult.hasBudget = true
               builderResult.budget = value
           }
      }
      public func setBudget(value:Bool) -> User.UserPref.Builder {
        self.budget = value
        return self
      }
      public func clearBudget() -> User.UserPref.Builder{
           builderResult.hasBudget = false
           builderResult.budget = false
           return self
      }
      public var hasFamily:Bool {
           get {
                return builderResult.hasFamily
           }
      }
      public var family:Bool {
           get {
                return builderResult.family
           }
           set (value) {
               builderResult.hasFamily = true
               builderResult.family = value
           }
      }
      public func setFamily(value:Bool) -> User.UserPref.Builder {
        self.family = value
        return self
      }
      public func clearFamily() -> User.UserPref.Builder{
           builderResult.hasFamily = false
           builderResult.family = false
           return self
      }
      public var hasFoodie:Bool {
           get {
                return builderResult.hasFoodie
           }
      }
      public var foodie:Bool {
           get {
                return builderResult.foodie
           }
           set (value) {
               builderResult.hasFoodie = true
               builderResult.foodie = value
           }
      }
      public func setFoodie(value:Bool) -> User.UserPref.Builder {
        self.foodie = value
        return self
      }
      public func clearFoodie() -> User.UserPref.Builder{
           builderResult.hasFoodie = false
           builderResult.foodie = false
           return self
      }
      public var hasGreen:Bool {
           get {
                return builderResult.hasGreen
           }
      }
      public var green:Bool {
           get {
                return builderResult.green
           }
           set (value) {
               builderResult.hasGreen = true
               builderResult.green = value
           }
      }
      public func setGreen(value:Bool) -> User.UserPref.Builder {
        self.green = value
        return self
      }
      public func clearGreen() -> User.UserPref.Builder{
           builderResult.hasGreen = false
           builderResult.green = false
           return self
      }
      public var hasHistory:Bool {
           get {
                return builderResult.hasHistory
           }
      }
      public var history:Bool {
           get {
                return builderResult.history
           }
           set (value) {
               builderResult.hasHistory = true
               builderResult.history = value
           }
      }
      public func setHistory(value:Bool) -> User.UserPref.Builder {
        self.history = value
        return self
      }
      public func clearHistory() -> User.UserPref.Builder{
           builderResult.hasHistory = false
           builderResult.history = false
           return self
      }
      public var hasLocal:Bool {
           get {
                return builderResult.hasLocal
           }
      }
      public var local:Bool {
           get {
                return builderResult.local
           }
           set (value) {
               builderResult.hasLocal = true
               builderResult.local = value
           }
      }
      public func setLocal(value:Bool) -> User.UserPref.Builder {
        self.local = value
        return self
      }
      public func clearLocal() -> User.UserPref.Builder{
           builderResult.hasLocal = false
           builderResult.local = false
           return self
      }
      public var hasLuxury:Bool {
           get {
                return builderResult.hasLuxury
           }
      }
      public var luxury:Bool {
           get {
                return builderResult.luxury
           }
           set (value) {
               builderResult.hasLuxury = true
               builderResult.luxury = value
           }
      }
      public func setLuxury(value:Bool) -> User.UserPref.Builder {
        self.luxury = value
        return self
      }
      public func clearLuxury() -> User.UserPref.Builder{
           builderResult.hasLuxury = false
           builderResult.luxury = false
           return self
      }
      public var hasNature:Bool {
           get {
                return builderResult.hasNature
           }
      }
      public var nature:Bool {
           get {
                return builderResult.nature
           }
           set (value) {
               builderResult.hasNature = true
               builderResult.nature = value
           }
      }
      public func setNature(value:Bool) -> User.UserPref.Builder {
        self.nature = value
        return self
      }
      public func clearNature() -> User.UserPref.Builder{
           builderResult.hasNature = false
           builderResult.nature = false
           return self
      }
      public var hasNightlife:Bool {
           get {
                return builderResult.hasNightlife
           }
      }
      public var nightlife:Bool {
           get {
                return builderResult.nightlife
           }
           set (value) {
               builderResult.hasNightlife = true
               builderResult.nightlife = value
           }
      }
      public func setNightlife(value:Bool) -> User.UserPref.Builder {
        self.nightlife = value
        return self
      }
      public func clearNightlife() -> User.UserPref.Builder{
           builderResult.hasNightlife = false
           builderResult.nightlife = false
           return self
      }
      public var hasSerene:Bool {
           get {
                return builderResult.hasSerene
           }
      }
      public var serene:Bool {
           get {
                return builderResult.serene
           }
           set (value) {
               builderResult.hasSerene = true
               builderResult.serene = value
           }
      }
      public func setSerene(value:Bool) -> User.UserPref.Builder {
        self.serene = value
        return self
      }
      public func clearSerene() -> User.UserPref.Builder{
           builderResult.hasSerene = false
           builderResult.serene = false
           return self
      }
      public var hasShopping:Bool {
           get {
                return builderResult.hasShopping
           }
      }
      public var shopping:Bool {
           get {
                return builderResult.shopping
           }
           set (value) {
               builderResult.hasShopping = true
               builderResult.shopping = value
           }
      }
      public func setShopping(value:Bool) -> User.UserPref.Builder {
        self.shopping = value
        return self
      }
      public func clearShopping() -> User.UserPref.Builder{
           builderResult.hasShopping = false
           builderResult.shopping = false
           return self
      }
      public var hasStudent:Bool {
           get {
                return builderResult.hasStudent
           }
      }
      public var student:Bool {
           get {
                return builderResult.student
           }
           set (value) {
               builderResult.hasStudent = true
               builderResult.student = value
           }
      }
      public func setStudent(value:Bool) -> User.UserPref.Builder {
        self.student = value
        return self
      }
      public func clearStudent() -> User.UserPref.Builder{
           builderResult.hasStudent = false
           builderResult.student = false
           return self
      }
      public var hasTrendsetter:Bool {
           get {
                return builderResult.hasTrendsetter
           }
      }
      public var trendsetter:Bool {
           get {
                return builderResult.trendsetter
           }
           set (value) {
               builderResult.hasTrendsetter = true
               builderResult.trendsetter = value
           }
      }
      public func setTrendsetter(value:Bool) -> User.UserPref.Builder {
        self.trendsetter = value
        return self
      }
      public func clearTrendsetter() -> User.UserPref.Builder{
           builderResult.hasTrendsetter = false
           builderResult.trendsetter = false
           return self
      }
      public var hasUrban:Bool {
           get {
                return builderResult.hasUrban
           }
      }
      public var urban:Bool {
           get {
                return builderResult.urban
           }
           set (value) {
               builderResult.hasUrban = true
               builderResult.urban = value
           }
      }
      public func setUrban(value:Bool) -> User.UserPref.Builder {
        self.urban = value
        return self
      }
      public func clearUrban() -> User.UserPref.Builder{
           builderResult.hasUrban = false
           builderResult.urban = false
           return self
      }
      public var hasVegetarian:Bool {
           get {
                return builderResult.hasVegetarian
           }
      }
      public var vegetarian:Bool {
           get {
                return builderResult.vegetarian
           }
           set (value) {
               builderResult.hasVegetarian = true
               builderResult.vegetarian = value
           }
      }
      public func setVegetarian(value:Bool) -> User.UserPref.Builder {
        self.vegetarian = value
        return self
      }
      public func clearVegetarian() -> User.UserPref.Builder{
           builderResult.hasVegetarian = false
           builderResult.vegetarian = false
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> User.UserPref.Builder {
        builderResult = User.UserPref()
        return self
      }
      public override func clone() throws -> User.UserPref.Builder {
        return try User.UserPref.builderWithPrototype(builderResult)
      }
      public override func build() throws -> User.UserPref {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> User.UserPref {
        let returnMe:User.UserPref = builderResult
        return returnMe
      }
      public func mergeFrom(other:User.UserPref) throws -> User.UserPref.Builder {
        if other == User.UserPref() {
         return self
        }
        if other.hasArtsy {
             artsy = other.artsy
        }
        if other.hasAdrenaline {
             adrenaline = other.adrenaline
        }
        if other.hasBackpacker {
             backpacker = other.backpacker
        }
        if other.hasBeach {
             beach = other.beach
        }
        if other.hasBudget {
             budget = other.budget
        }
        if other.hasFamily {
             family = other.family
        }
        if other.hasFoodie {
             foodie = other.foodie
        }
        if other.hasGreen {
             green = other.green
        }
        if other.hasHistory {
             history = other.history
        }
        if other.hasLocal {
             local = other.local
        }
        if other.hasLuxury {
             luxury = other.luxury
        }
        if other.hasNature {
             nature = other.nature
        }
        if other.hasNightlife {
             nightlife = other.nightlife
        }
        if other.hasSerene {
             serene = other.serene
        }
        if other.hasShopping {
             shopping = other.shopping
        }
        if other.hasStudent {
             student = other.student
        }
        if other.hasTrendsetter {
             trendsetter = other.trendsetter
        }
        if other.hasUrban {
             urban = other.urban
        }
        if other.hasVegetarian {
             vegetarian = other.vegetarian
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> User.UserPref.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> User.UserPref.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            artsy = try input.readBool()

          case 16 :
            adrenaline = try input.readBool()

          case 24 :
            backpacker = try input.readBool()

          case 32 :
            beach = try input.readBool()

          case 40 :
            budget = try input.readBool()

          case 48 :
            family = try input.readBool()

          case 56 :
            foodie = try input.readBool()

          case 64 :
            green = try input.readBool()

          case 72 :
            history = try input.readBool()

          case 80 :
            local = try input.readBool()

          case 88 :
            luxury = try input.readBool()

          case 96 :
            nature = try input.readBool()

          case 104 :
            nightlife = try input.readBool()

          case 112 :
            serene = try input.readBool()

          case 120 :
            shopping = try input.readBool()

          case 128 :
            student = try input.readBool()

          case 136 :
            trendsetter = try input.readBool()

          case 144 :
            urban = try input.readBool()

          case 152 :
            vegetarian = try input.readBool()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
